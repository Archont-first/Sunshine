import json
import os
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

DATA_FILE = "clients.json"
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(TOKEN)
dp = Dispatcher()

waiting_for_apartment = set()


def load_clients():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}


def save_clients(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


clients = load_clients()


@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = str(message.from_user.id)
    if user_id not in clients:
        waiting_for_apartment.add(user_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞:")
    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É.")


@dp.message()
async def process_message(message: Message):
    user_id = str(message.from_user.id)
    if user_id in waiting_for_apartment:
        clients[user_id] = {
            "username": message.from_user.username,
            "apartment": message.text.strip()
        }
        save_clients(clients)
        waiting_for_apartment.remove(user_id)
        await message.answer("–°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    elif message.text in {"–ö–æ–Ω–µ—á–Ω–æ", "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ"}:
        await handle_response(message)


async def handle_response(message: Message):
    if message.text == "–ö–æ–Ω–µ—á–Ω–æ":
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton("–ü–æ–Ω—á–∏–∫–∏"), KeyboardButton("–ö–æ—Ñ–µ"))
        await message.answer("–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ?", reply_markup=markup)
    else:
        await message.answer("–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!")


async def send_offer():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ö–æ–Ω–µ—á–Ω–æ"), KeyboardButton("–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ"))
    for user_id in clients:
        try:
            await bot.send_message(user_id, "–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –¥–µ–Ω—å —Å –∫–æ—Ñ–µ?", reply_markup=markup)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")


async def main():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_offer, "interval", days=2)
    scheduler.start()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
import os
import json
from apscheduler.schedulers.background import BackgroundScheduler
import telebot
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
DATA_FILE = "clients.json"  # –ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise RuntimeError("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å –µ–≥–æ –≤ .env")

bot = telebot.TeleBot(TOKEN)
waiting_for_apartment = set()  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–æ–¥—è—Ç –Ω–æ–º–µ—Ä –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
def load_clients():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
def save_clients(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

clients = load_clients()

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def start(message):
    user_id = str(message.from_user.id)
    if user_id not in clients:
        waiting_for_apartment.add(user_id)
        bot.send_message(message.chat.id, "‚òï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞:")
    else:
        bot.send_message(message.chat.id, "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = str(message.from_user.id)
    text = message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
    if user_id in waiting_for_apartment:
        clients[user_id] = {
            "username": message.from_user.username,
            "apartment": text,
        }
        save_clients(clients)
        waiting_for_apartment.remove(user_id)
        bot.send_message(message.chat.id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –≤ –±–∞–∑–µ. –û–∂–∏–¥–∞–π—Ç–µ —É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—Ñ–µ!")
    
    # –ï—Å–ª–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
    elif text == "–ö–æ–Ω–µ—á–Ω–æ":
        show_menu(message)
    elif text == "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ":
        bot.send_message(message.chat.id, "‚òÄÔ∏è –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!")
    
    # –ï—Å–ª–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –∏–∑ –º–µ–Ω—é
    elif text in ["–ü–æ–Ω—á–∏–∫–∏", "–ö–æ—Ñ–µ"]:
        send_price(message)

# –ü–æ–∫–∞–∑ –º–µ–Ω—é
def show_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ü–æ–Ω—á–∏–∫–∏"), types.KeyboardButton("–ö–æ—Ñ–µ"))
    bot.send_message(message.chat.id, "üç© –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤–∫—É—Å–Ω–æ–µ:", reply_markup=markup)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ü–µ–Ω—ã –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
def send_price(message):
    item = message.text
    prices = {
        "–ü–æ–Ω—á–∏–∫–∏": "5$",
        "–ö–æ—Ñ–µ": "3$",
    }
    if item in prices:
        bot.send_message(
            message.chat.id,
            f"üí∞ {item}: {prices[item]}\n"
            f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: **1234 5678 9012 3456**\n"
            f"üìù –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞!"
        )

# –†–∞—Å—Å—ã–ª–∫–∞ "–•–æ—Ç–∏—Ç–µ –∫–æ—Ñ–µ?"
def send_coffee_offer():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ö–æ–Ω–µ—á–Ω–æ"), types.KeyboardButton("–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ"))
    
    for user_id in clients:
        try:
            bot.send_message(user_id, "‚òï –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –¥–µ–Ω—å —Å –∫–æ—Ñ–µ?", reply_markup=markup)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user_id}: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ + —Ä–∞—Å—Å—ã–ª–∫–∞
if __name__ == "__main__":
    bot.remove_webhook()
    scheduler = BackgroundScheduler()
    scheduler.add_job(send_coffee_offer, "interval", days=1)  # –†–∞—Å—Å—ã–ª–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    scheduler.start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ")
    bot.infinity_polling()
